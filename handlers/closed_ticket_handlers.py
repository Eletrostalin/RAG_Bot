import logging
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from states import AdminStates
from db import get_closed_tickets, get_ticket_history, async_session
from models import Question, User
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

router = Router()


@router.message(Command(commands=['getclosedticket']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def get_closed_tickets_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.
    """
    try:
        tickets = await get_closed_tickets()

        if not tickets:
            await message.answer("üî¥ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for ticket in tickets:
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–∏–∫–µ—Ç–∞
                result = await session.execute(
                    select(Question).where(Question.ticket_id == ticket.ticket_id).order_by(Question.creation_time)
                )
                question = result.scalars().first()
                subject = question.subject if question else "–ë–µ–∑ —Ç–µ–º—ã"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –Ω–∞ –∫–Ω–æ–ø–∫—É
            button_text = f"üìã –¢–∏–∫–µ—Ç {ticket.ticket_id}: {subject}"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"view_ticket_{ticket.ticket_id}")])

        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_authorized")])

        await message.answer("üìÇ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã.")
        await state.update_data(viewing_closed_tickets=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data.startswith('view_ticket_'), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def view_ticket(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    try:
        ticket_id = int(callback_query.data.split('_')[2])
        history = await get_ticket_history(ticket_id)

        if not history:
            await callback_query.message.edit_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ.")
            return

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç–∏–∫–µ—Ç
            result = await session.execute(
                select(User).where(User.telegram_id == history[0].telegram_id)
            )
            user = result.scalars().first()

        text = ""
        for entry in history:
            async with async_session() as session:
                result = await session.execute(
                    select(User).where(User.telegram_id == entry.telegram_id)
                )
                user = result.scalars().first()

                user_display_name = user.full_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                entry_text = (
                    f"üë§ **–ò–º—è:** {user_display_name}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {entry.creation_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìù **{'–í–æ–ø—Ä–æ—Å' if isinstance(entry, Question) else '–û—Ç–≤–µ—Ç'}:**\n{entry.text}\n\n"
                )
                text += entry_text

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤", callback_data="return_to_closed_tickets")]
            ]
        )

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.update_data(ticket_id=ticket_id, ticket_text=text)
        await state.set_state(AdminStates.VIEW_TICKET)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == 'return_to_closed_tickets', StateFilter(AdminStates.VIEW_TICKET))
async def return_to_closed_tickets(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.
    """
    try:
        tickets = await get_closed_tickets()

        if not tickets:
            await callback_query.message.edit_text("üî¥ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üìã –¢–∏–∫–µ—Ç {ticket.ticket_id}", callback_data=f"view_ticket_{ticket.ticket_id}")]
                for ticket in tickets
            ]
        )
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_authorized")])

        await callback_query.message.edit_text("üìÇ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == 'return_to_authorized', StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def return_to_authorized(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        await callback_query.message.edit_text("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")