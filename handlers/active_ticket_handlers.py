import logging
from datetime import datetime, timedelta
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from states import AdminStates
from db import get_active_tickets, get_ticket_history, close_ticket_by_admin, async_session, add_answer
from models import Answer, Question, User, MediaFile
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.s3_utils import validate_and_compress_media, send_file_from_url

router = Router()


@router.message(Command(commands=['getticket']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def get_tickets_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getticket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.
    """
    await show_tickets_page(message, state, page=0)


async def show_tickets_page(message: types.Message, state: FSMContext, page: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    try:
        tickets_per_page = 10
        offset = page * tickets_per_page
        tickets = await get_active_tickets(offset=offset, limit=tickets_per_page)

        if not tickets:
            await message.answer("üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
            await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
            return

        now = datetime.utcnow()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for ticket in tickets:
            ticket_age = now - ticket.last_updated
            emoji = "üî•üî•üî•" if ticket_age > timedelta(minutes=2) else ""
            async with async_session() as session:
                result = await session.execute(
                    select(Question).where(Question.ticket_id == ticket.ticket_id).order_by(Question.creation_time)
                )
                question = result.scalars().first()
                subject = question.subject if question else "–ë–µ–∑ —Ç–µ–º—ã"
                button_text = (
                    f"–¢–∏–∫–µ—Ç {ticket.ticket_id}: {subject} "
                    f"(–æ—Ç–≤–µ—Ç–∏–ª: {ticket.last_admin_name}) {emoji}"
                )
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=button_text, callback_data=f"view_active_ticket_{ticket.ticket_id}")
                ])

        if page > 0:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"tickets_page_{page - 1}")
            ])
        if len(tickets) == tickets_per_page:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"tickets_page_{page + 1}")
            ])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_authorized")])

        await message.answer("üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")
        await state.update_data(viewing_closed_tickets=False, current_page=page)
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data.startswith('view_active_ticket_'), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def view_active_ticket(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–∞ –∏
    –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞.

    :param callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    logging.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞. Callback data: {callback_query.data}")
    try:
        ticket_id = int(callback_query.data.split('_')[3])
        history = await get_ticket_history(ticket_id)

        if not history:
            await callback_query.message.edit_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ.")
            logging.info(f"–¢–∏–∫–µ—Ç {ticket_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        text = f"üìã **–¢–∏–∫–µ—Ç ‚Ññ{ticket_id}**\n\n"
        async with async_session() as session:
            for entry in history:
                result = await session.execute(select(User).where(User.telegram_id == entry.telegram_id))
                user = result.scalars().first()

                user_display_name = user.full_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                entry_text = (
                    f"üë§ **–ò–º—è:** {user_display_name}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {entry.creation_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìù **{'–í–æ–ø—Ä–æ—Å' if isinstance(entry, Question) else '–û—Ç–≤–µ—Ç'}:**\n{entry.text}\n\n"
                )

                text += entry_text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö
        has_media_files = False
        async with async_session() as session:
            result = await session.execute(
                select(MediaFile).where(
                    (MediaFile.question_id.in_(select(Question.question_id).where(Question.ticket_id == ticket_id))) |
                    (MediaFile.answer_id.in_(select(Answer.answer_id).where(Answer.ticket_id == ticket_id)))
                )
            )
            media_files = result.scalars().all()
            if media_files:
                has_media_files = True

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å –¢–∏–∫–µ—Ç", callback_data=f"close_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="get_active_tickets")]
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å
        if has_media_files:
            keyboard.inline_keyboard.insert(2, [
                InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞", callback_data=f"download_media_{ticket_id}")
            ])

        await callback_query.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        logging.info(f"–ü–æ–∫–∞–∑–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback_query.from_user.id}.")
        await state.update_data(ticket_id=ticket_id, ticket_text=text)
        await state.set_state(AdminStates.VIEW_TICKET)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data.startswith('answer_ticket_'), StateFilter(AdminStates.VIEW_TICKET))
async def answer_ticket(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç.

    :param callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        data = await state.get_data()
        ticket_text = data['ticket_text']
        await callback_query.message.edit_text(f"{ticket_text}\n\n‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç.")
        await state.set_state(AdminStates.WAITING_FOR_RESPONSE)
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Ç–∏–∫–µ—Ç {callback_query.data.split('_')[3]} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(StateFilter(AdminStates.WAITING_FOR_RESPONSE))
async def receive_answer(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id} —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {message.content_type}")
    await message.reply("–Ø –º–æ–≥—É –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —É –≤–∞—Å –∏—Ö –±–æ–ª—å—à–µ –¥–æ—à–ª–∏—Ç–µ –∏—Ö –≤ –ª–∏—á–∫–µ –∫ —Ç–∏–∫–µ—Ç—É")
    try:
        data = await state.get_data()
        ticket_id = data['ticket_id']
        admin_id = message.from_user.id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ message.text –∏–ª–∏ message.caption
        answer_text = message.text or message.caption  # –ò—Å–ø–æ–ª—å–∑—É–µ–º caption –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞

        if not answer_text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)
        media_files = []
        if message.photo:
            media_files_raw = []
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            largest_photo = message.photo[2]
            logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å ID {largest_photo.file_id}")
            file_info = await message.bot.get_file(largest_photo.file_id)
            logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ {file_info.file_path}")
            downloaded_file = await message.bot.download_file(file_info.file_path)
            media_files_raw.append({
                'file': downloaded_file,
                'filename': largest_photo.file_id,
                'is_image': True
            })

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            media_files = await validate_and_compress_media(media_files_raw, message)
            if not media_files:
                logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–∂–∞—Ç–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
                return

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        new_answer, ticket = await add_answer(admin_id, ticket_id, answer_text, media_files)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ –º–µ–¥–∏–∞
        logging.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, ID –æ—Ç–≤–µ—Ç–∞: {new_answer.answer_id}")

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∏–∫–µ—Ç—É",
                                      callback_data=f"view_active_ticket_{ticket.ticket_id}")],
                [InlineKeyboardButton(text="üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤", callback_data="get_tickets")]
            ]
        )

        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)


@router.callback_query(lambda c: c.data == 'get_tickets', StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def return_to_tickets_after_response(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç.

    :param callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        data = await state.get_data()
        page = data.get('current_page', 0)
        await show_tickets_page(callback_query.message, state, page)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == 'get_active_tickets', StateFilter(AdminStates.VIEW_TICKET))
async def return_to_active_tickets(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞.

    :param callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    logging.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º. Callback data: {callback_query.data}")
    try:
        data = await state.get_data()
        page = data.get('current_page', 0)
        await show_tickets_page(callback_query.message, state, page)
        logging.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data.startswith('close_ticket_'), StateFilter(AdminStates.VIEW_TICKET))
async def close_ticket_handler(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞.

    :param callback_query: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        ticket_id = int(callback_query.data.split('_')[2])
        await close_ticket_by_admin(ticket_id)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤", callback_data="get_active_tickets")]
            ]
        )

        await callback_query.message.edit_text("üîí –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.", reply_markup=keyboard)
        await state.set_state(AdminStates.VIEW_TICKET)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data.startswith('download_media_'), StateFilter(AdminStates.VIEW_TICKET))
async def download_media_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback data
        ticket_id = int(callback_query.data.split('_')[2])

        # –î–æ—Å—Ç–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            result = await session.execute(
                select(MediaFile).where(MediaFile.ticket_id == ticket_id)
            )
            media_files = result.scalars().all()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        if not media_files:
            await callback_query.message.answer("‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")
            return

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º send_file_from_url –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        for media in media_files:
            await send_file_from_url(callback_query.bot, callback_query.from_user.id, media.file_url)

        await callback_query.message.answer("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} —Å–∫–∞—á–∞–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")


@router.callback_query(lambda c: c.data.startswith('tickets_page_'), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def change_tickets_page(callback_query: CallbackQuery, state: FSMContext):
    try:
        page = int(callback_query.data.split('_')[-1])
        await show_tickets_page(callback_query.message, state, page)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == 'return_to_authorized', StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def return_to_authorized(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ")
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

