import io
import logging
import os
import tempfile

import aiohttp
from aiogram.enums import ContentType
from botocore.exceptions import NoCredentialsError

import config
from aiogram.types import Message, FSInputFile
from aiogram import types, Router, Bot, F
from aiogram.fsm.context import FSMContext
from chains.chroma_utils import (get_documents_from_chroma, initialize_chroma_client,
                                 clear_chroma_collection)
from utils.keyboards import get_admin_inline_keyboard
from utils.s3_utils import s3, upload_to_s3_db
from states import AdminStates
from db import async_session
from sqlalchemy.future import select
from models import User
from aiogram.filters import Command, StateFilter

router = Router()

async def set_admin_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    admin_commands = [
        types.BotCommand(command="/getusers", description="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        types.BotCommand(command="/getticket", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"),
        types.BotCommand(command="/getclosedticket", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"),
        types.BotCommand(command="/home", description="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/load_embeddings", description="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ Chroma"),
        types.BotCommand(command="/showembeddings", description="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏"),
        types.BotCommand(command="/clear_chroma", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é Chroma"),
        types.BotCommand(command="/uploadtxt", description="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å txt —Ñ–∞–π–ª –≤ S3"),
        types.BotCommand(command="/listfiles", description="üìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ S3")
    ]
    await bot.set_my_commands(admin_commands)
    logging.info("Admin commands set.")


@router.message(Command(commands=['getusers']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def get_users_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getusers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        async with async_session() as session:
            result = await session.execute(select(User))
            users = result.scalars().all()

            if not users:
                await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
                return

            user_list = "\n\n".join([
                f"üë§ <b>–ò–º—è:</b> {user.username}\n"
                f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {user.full_name}\n"
                f"üîß <b>–†–æ–ª—å:</b> {'–ê–¥–º–∏–Ω' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
                for user in users
            ])
            await message.answer(f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}", parse_mode="HTML")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await set_admin_commands(message.bot)


@router.message(Command(commands=['home']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def admin_home(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /home –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_admin_inline_keyboard())
    await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
    await set_admin_commands(message.bot)


@router.message(Command(commands=['load_embeddings']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def load_embeddings_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_embeddings –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –≤—Å–µ—Ö txt —Ñ–∞–π–ª–æ–≤ –≤ S3 –±–∞–∫–µ—Ç–µ.
    """
    token = config.IAM_TOKEN
    folder_id = config.FOLDER_ID
    embeddings_endpoint = f"{config.RAG_API_URL}/embeddings"

    try:
        response = s3.list_objects_v2(Bucket=config.bucket_name_db)
        files = response.get('Contents', [])
        if not files:
            await message.answer("‚ùå –í –±–∞–∫–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
            logging.info("–í –±–∞–∫–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
            return

        txt_files = [file['Key'] for file in files if file['Key'].endswith('.txt')]
        if not txt_files:
            await message.answer("‚ùå –í –±–∞–∫–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .txt –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
            logging.info("–í –±–∞–∫–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .txt –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
            return

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(txt_files)} —Ñ–∞–π–ª–æ–≤ .txt –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {txt_files}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∞–∫–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∞–∫–µ—Ç–∞.")
        return

    for txt_file in txt_files:
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                local_path = os.path.join(temp_dir, os.path.basename(txt_file))
                logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {txt_file} —Å —Å–µ—Ä–≤–µ—Ä–∞ S3.")
                with open(local_path, "wb") as file:
                    s3.download_fileobj(config.bucket_name_db, txt_file, file)

                logging.info(f"–§–∞–π–ª {txt_file} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}.")
                payload = {
                    "model_name": "distiluse-base-multilingual-cased-v1",
                    "txt_path": local_path
                }

                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {txt_file} –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
                async with aiohttp.ClientSession() as session:
                    async with session.post(embeddings_endpoint, json=payload) as response:
                        if response.status == 200:
                            logging.info(f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {txt_file} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                        else:
                            response_text = await response.text()
                            logging.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {txt_file}: {response.status}, –æ—Ç–≤–µ—Ç: {response_text}")
                            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {txt_file}.")
        except NoCredentialsError:
            logging.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ S3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ S3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {txt_file}: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {txt_file}.")

    await message.answer("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã .txt –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    await set_admin_commands(message.bot)


@router.message(Command(commands=['showembeddings']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def show_embeddings_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /showembeddings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –±–∞–∑–µ Chroma.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Chroma –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        knowledge_base = initialize_chroma_client(
            collection_name="knowledge_base",
            persist_directory="/Users/nickstanchenkov/FD_bot_v3/FD_bot_v3/utils"  # –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        result = get_documents_from_chroma(knowledge_base)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if not result:
            await message.answer("üóÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        documents = result.get("documents", [])
        formatted_docs = "\n\n".join([
            f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç:</b> {doc[:200]}..."  # –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            for doc in documents
        ])

        await message.answer(f"üóÇ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b>\n\n{formatted_docs}", parse_mode="HTML")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await set_admin_commands(message.bot)


@router.message(Command(commands=['clear_chroma']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def clear_chroma_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_chroma –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Chroma.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã Chroma.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Chroma –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        knowledge_base = initialize_chroma_client(
            collection_name="knowledge_base",
            persist_directory="/Users/nickstanchenkov/FD_bot_v3/FD_bot_v3/utils"  # –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        clear_chroma_collection(knowledge_base)

        await message.answer("üóëÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è Chroma —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—á–∏—Å—Ç–∏–ª –∫–æ–ª–ª–µ–∫—Ü–∏—é Chroma.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Chroma –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await set_admin_commands(message.bot)


@router.message(Command(commands=['uploadtxt']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def upload_txt_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /uploadtxt –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ txt —Ñ–∞–π–ª–æ–≤ –≤ S3.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ txt —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ–±–ª–∞–∫–æ.")
    await state.set_state(AdminStates.WAITING_FOR_FILE)
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥—Ä—É–∑–∫—É txt —Ñ–∞–π–ª–∞.")


@router.message(StateFilter(AdminStates.WAITING_FOR_FILE), F.document)
async def handle_txt_upload(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ .txt –≤ S3.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç txt —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è,
    —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram, –∞ –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ.
    """
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.endswith('.txt'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt.")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {document.file_name}.")
        return

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å Telegram —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {document.file_name} —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram.")
        file = io.BytesIO()
        await message.bot.download(document, file)
        file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ S3
        s3_url = await upload_to_s3_db(file, config.bucket_name_db, document.file_name)

        if s3_url:
            await message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ: {s3_url}")
            logging.info(f"–§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}.")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ S3.")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {document.file_name} –≤ S3 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await state.set_state(AdminStates.AUTHENTICATED_ADMIN)


@router.message(Command(commands=['listfiles']), StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def list_files_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /listfiles –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ S3.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ S3
        response = s3.list_objects_v2(Bucket=config.bucket_name_db)
        files = response.get('Contents', [])

        if not files:
            await message.answer("üìÇ –í –±–∞–∫–µ—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –Ω–æ –±–∞–∫–µ—Ç –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_list = "\n".join([f"üìÑ {file['Key']}" for file in files])

        await message.answer(f"üìÇ <b>–§–∞–π–ª—ã –≤ –±–∞–∫–µ—Ç–µ:</b>\n\n{file_list}", parse_mode="HTML")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")