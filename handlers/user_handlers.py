from config import ADMIN_IDS
from aiogram import Router
from aiogram.fsm.context import FSMContext
from states import UserStates
from db import *
from models import User, Question, Answer
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from utils.s3_utils import validate_and_compress_media, send_file_from_url

router = Router()

@router.message(Command(commands=['showtickets']), StateFilter(UserStates.AUTHENTICATED_USER))
async def show_tickets_handler(message: types.Message):
    user_id = message.from_user.id
    await show_user_tickets(message, user_id)

async def show_user_tickets(message: types.Message, user_id: int):
    logging.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")  # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    tickets = await get_user_tickets(user_id)

    if not tickets:
        await message.answer("üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for ticket in tickets:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
            result = await session.execute(
                select(Answer).where(Answer.ticket_id == ticket.ticket_id).order_by(Answer.answer_time.desc())
            )
            last_answer = result.scalars().first()
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–æ—á–µ–∫
            emoji = "üîí" if not ticket.active and ticket.closed_by_user else (
                "üî•" if last_answer and last_answer.telegram_id in ADMIN_IDS else "")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞
            result = await session.execute(
                select(Question).where(Question.ticket_id == ticket.ticket_id).order_by(Question.creation_time)
            )
            question = result.scalars().first()
            subject = question.subject if question else "–ë–µ–∑ —Ç–µ–º—ã"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"–¢–∏–∫–µ—Ç {ticket.ticket_id}: {subject} {emoji}"
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=button_text, callback_data=f"view_user_ticket_{ticket.ticket_id}")])

    await message.answer("üìÇ –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã.")

@router.callback_query(lambda c: c.data.startswith('view_user_ticket_'), StateFilter(UserStates.AUTHENTICATED_USER))
async def view_user_ticket(callback_query: CallbackQuery, state: FSMContext):
    logging.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. Callback data: {callback_query.data}")
    try:
        ticket_id = int(callback_query.data.split('_')[3])
        history = await get_ticket_history(ticket_id)

        if not history:
            await callback_query.message.edit_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ.")
            logging.info(f"–¢–∏–∫–µ—Ç {ticket_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        text = f"üìã **–í–∞—à —Ç–∏–∫–µ—Ç ‚Ññ{ticket_id}**\n\n"
        async with async_session() as session:
            for entry in history:
                result = await session.execute(select(User).where(User.telegram_id == entry.telegram_id))
                user = result.scalars().first()

                user_display_name = user.full_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                entry_text = (
                    f"üë§ **–ò–º—è:** {user_display_name}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {entry.creation_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìù **{'–í–æ–ø—Ä–æ—Å' if isinstance(entry, Question) else '–û—Ç–≤–µ—Ç'}:**\n{entry.text}\n\n"
                )

                text += entry_text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        has_media_files = False
        async with async_session() as session:
            result = await session.execute(
                select(MediaFile).where(
                    (MediaFile.question_id.in_(select(Question.question_id).where(Question.ticket_id == ticket_id))) |
                    (MediaFile.answer_id.in_(select(Answer.answer_id).where(Answer.ticket_id == ticket_id)))
                )
            )
            media_files = result.scalars().all()
            if media_files:
                has_media_files = True

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"user_answer_ticket_{ticket_id}")],
                [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_user_ticket_{ticket_id}")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_user_tickets")]
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å
        if has_media_files:
            keyboard.inline_keyboard.insert(2, [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞", callback_data=f"download_media_{ticket_id}")])

        await callback_query.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id}.")
        await state.update_data(ticket_id=ticket_id, ticket_text=text)
        await state.set_state(UserStates.VIEW_TICKET)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data.startswith('user_answer_ticket_'), StateFilter(UserStates.VIEW_TICKET))
async def user_reply_ticket(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç.")
        await state.set_state(UserStates.WAITING_FOR_RESPONSE)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Ç–∏–∫–µ—Ç {callback_query.data.split('_')[3]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data.startswith('download_media_'), StateFilter(UserStates.VIEW_TICKET))
async def download_media_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback data
        ticket_id = int(callback_query.data.split('_')[2])

        # –î–æ—Å—Ç–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            result = await session.execute(
                select(MediaFile).where(MediaFile.question_id.in_(
                    select(Question.question_id).where(Question.ticket_id == ticket_id)
                ))
            )
            media_files = result.scalars().all()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        if not media_files:
            await callback_query.message.answer("‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")
            return

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º send_file_from_url –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        for media in media_files:
            await send_file_from_url(callback_query.bot, callback_query.from_user.id, media.file_url)

        await callback_query.message.answer("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        await state.set_state(UserStates.AUTHENTICATED_USER)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Å–∫–∞—á–∞–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")


@router.message(StateFilter(UserStates.WAITING_FOR_RESPONSE))
async def user_receive_answer(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {message.content_type}")

    try:
        data = await state.get_data()
        ticket_id = data['ticket_id']
        user_id = message.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)
        media_files = []

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ message.text –∏–ª–∏ message.caption
        answer_text = message.text or message.caption  # –ò—Å–ø–æ–ª—å–∑—É–µ–º caption –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞
        print(answer_text)
        if not answer_text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
            return

        if message.photo:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            for photo in message.photo:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                file_info = await message.bot.get_file(photo.file_id)
                downloaded_file = await message.bot.download_file(file_info.file_path)
                media_files_raw = [{
                    'file': downloaded_file,
                    'filename': file_info.file_path.split('/')[-1],
                    'is_image': True
                }]

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                validated_files = await validate_and_compress_media(media_files_raw, message)
                if not validated_files:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.")
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                media_files.extend(validated_files)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        async with async_session() as session:
            result = await session.execute(
                select(Question.subject).where(Question.ticket_id == ticket_id).order_by(Question.creation_time.desc())
            )
            subject = result.scalars().first()

            result = await session.execute(select(Ticket).where(Ticket.ticket_id == ticket_id))
            ticket = result.scalars().first()
            if ticket:
                ticket.active = True
                await session.commit()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        new_question = await add_question_to_ticket(
            user_id=user_id,
            ticket_id=ticket_id,
            question_text=answer_text,
            subject=subject,
            media_files=media_files  # –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        async with async_session() as session:
            result = await session.execute(
                select(Answer).where(Answer.ticket_id == ticket_id).order_by(Answer.answer_time.desc())
            )
            last_answer = result.scalars().first()
            if last_answer:
                await message.bot.send_message(last_answer.telegram_id,
                                               f"–¢–∏–∫–µ—Ç ‚Ññ{ticket_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç:\n\n{answer_text}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∏–∫–µ—Ç—É",
                                      callback_data=f"view_user_ticket_{ticket.ticket_id}")],
                [InlineKeyboardButton(text="üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤", callback_data="return_to_user_tickets")]
            ]
        )

        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=keyboard)
        await state.set_state(UserStates.AUTHENTICATED_USER)

    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç {data['ticket_id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        await state.set_state(UserStates.VIEW_TICKET)

@router.callback_query(lambda c: c.data == 'return_to_user_tickets', StateFilter(UserStates.VIEW_TICKET))
async def return_to_user_tickets(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_query
    logging.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")  # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.set_state(UserStates.AUTHENTICATED_USER)
    await show_user_tickets(callback_query.message, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ show_user_tickets

@router.callback_query(lambda c: c.data.startswith('close_user_ticket_'), StateFilter(UserStates.VIEW_TICKET))
async def close_user_ticket_handler(callback_query: CallbackQuery, state: FSMContext):
    try:
        ticket_id = int(callback_query.data.split('_')[3])
        async with async_session() as session:
            result = await session.execute(select(Ticket).where(Ticket.ticket_id == ticket_id))
            ticket = result.scalars().first()

            if ticket:
                ticket.active = False
                ticket.closed_by_user = True
                await session.commit()
                await callback_query.message.edit_text("üîí –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
                await state.set_state(UserStates.AUTHENTICATED_USER)
            else:
                await callback_query.message.edit_text("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(UserStates.AUTHENTICATED_USER)

@router.message(Command(commands=['showclosedtickets']), StateFilter(UserStates.AUTHENTICATED_USER))
async def show_closed_tickets_handler(message: types.Message):
    user_id = message.from_user.id
    await show_user_closed_tickets(message, user_id)

async def show_user_closed_tickets(message: types.Message, user_id: int):
    logging.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

    tickets = await get_user_closed_tickets(user_id)

    if not tickets:
        await message.answer("üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for ticket in tickets:
        async with async_session() as session:
            result = await session.execute(
                select(Question).where(Question.ticket_id == ticket.ticket_id).order_by(Question.creation_time)
            )
            question = result.scalars().first()
            subject = question.subject if question else "–ë–µ–∑ —Ç–µ–º—ã"

            button_text = f"–¢–∏–∫–µ—Ç {ticket.ticket_id}: {subject}"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"view_user_closed_ticket_{ticket.ticket_id}")])


    await message.answer("üìÇ –ó–∞–∫—Ä—ã—Ç—ã–µ –≤–∞–º–∏ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã.")

@router.callback_query(lambda c: c.data.startswith('view_user_closed_ticket_'), StateFilter(UserStates.AUTHENTICATED_USER))
async def view_user_closed_ticket(callback_query: CallbackQuery, state: FSMContext):
    logging.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. Callback data: {callback_query.data}")
    try:
        ticket_id = int(callback_query.data.split('_')[4])
        history = await get_ticket_history(ticket_id)

        if not history:
            await callback_query.message.edit_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ.")
            logging.info(f"–¢–∏–∫–µ—Ç {ticket_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        text = f"üìã **–í–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç ‚Ññ{ticket_id}**\n\n"
        async with async_session() as session:
            for entry in history:
                result = await session.execute(select(User).where(User.telegram_id == entry.telegram_id))
                user = result.scalars().first()

                user_display_name = user.full_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                entry_text = (
                    f"üë§ **–ò–º—è:** {user_display_name}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {entry.creation_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìù **{'–í–æ–ø—Ä–æ—Å' if isinstance(entry, Question) else '–û—Ç–≤–µ—Ç'}:**\n{entry.text}\n\n"
                )

                text += entry_text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        has_media_files = False
        async with async_session() as session:
            result = await session.execute(
                select(MediaFile).where(
                    (MediaFile.question_id.in_(select(Question.question_id).where(Question.ticket_id == ticket_id))) |
                    (MediaFile.answer_id.in_(select(Answer.answer_id).where(Answer.ticket_id == ticket_id)))
                )
            )
            media_files = result.scalars().all()
            if media_files:
                has_media_files = True

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_user_closed_tickets")]
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å
        if has_media_files:
            keyboard.inline_keyboard.insert(1, [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞", callback_data=f"download_media_{ticket_id}")])

        await callback_query.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç {ticket_id}.")
        await state.update_data(ticket_id=ticket_id, ticket_text=text)
        await state.set_state(UserStates.VIEW_TICKET)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == 'return_to_user_closed_tickets', StateFilter(UserStates.VIEW_TICKET))
async def return_to_user_closed_tickets(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_query
    logging.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")  # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.set_state(UserStates.AUTHENTICATED_USER)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    tickets = await get_user_closed_tickets(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not tickets:
        await callback_query.message.answer("üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for ticket in tickets:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã —Ç–∏–∫–µ—Ç–∞
            result = await session.execute(
                select(Question).where(Question.ticket_id == ticket.ticket_id).order_by(Question.creation_time)
            )
            question = result.scalars().first()
            subject = question.subject if question else "–ë–µ–∑ —Ç–µ–º—ã"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"–¢–∏–∫–µ—Ç {ticket.ticket_id}: {subject}"
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=button_text, callback_data=f"view_user_closed_ticket_{ticket.ticket_id}")])

    await callback_query.message.answer("üìÇ –í–∞—à–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã.")