import logging
from aiogram import types, Bot, Router, F
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS
from states import AdminStates, UserStates
from aiogram.filters import Command, StateFilter

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.admin_handlers import (
    get_users_handler, admin_home, load_embeddings_handler,
    show_embeddings_handler, clear_chroma_handler,
    upload_txt_handler, list_files_handler
)
from handlers.active_ticket_handlers import get_tickets_handler
from handlers.closed_ticket_handlers import get_closed_tickets_handler
from handlers.user_handlers import show_tickets_handler, show_closed_tickets_handler
from utils.keyboards import get_admin_inline_keyboard, get_knowledge_base_inline_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_commands = {
    "/getusers": get_users_handler,
    "/home": admin_home,
    "/getticket": get_tickets_handler,
    "/getclosedticket": get_closed_tickets_handler,
    "/load_embeddings": load_embeddings_handler,
    "/showembeddings": show_embeddings_handler,
    "/clear_chroma": clear_chroma_handler,
    "/uploadtxt": upload_txt_handler,
    "/listfiles": list_files_handler
}

# –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_commands = {
    "/showtickets": show_tickets_handler,
    "/showclosedtickets": show_closed_tickets_handler
}


async def set_admin_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    admin_commands = [
        types.BotCommand(command="/getusers", description="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        types.BotCommand(command="/getticket", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"),
        types.BotCommand(command="/getclosedticket", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"),
        types.BotCommand(command="/home", description="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        types.BotCommand(command="/load_embeddings", description="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ Chroma"),
        types.BotCommand(command="/showembeddings", description="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏"),
        types.BotCommand(command="/clear_chroma", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é Chroma"),
        types.BotCommand(command="/uploadtxt", description="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å txt —Ñ–∞–π–ª –≤ S3"),
        types.BotCommand(command="/listfiles", description="üìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ S3")
    ]
    await bot.set_my_commands(admin_commands)
    logging.info("Admin commands set.")


async def set_user_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    user_commands = [
        types.BotCommand(command="/showtickets", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–∏–∫–µ—Ç—ã"),
        types.BotCommand(command="/showclosedtickets", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
    ]
    await bot.set_my_commands(user_commands)
    logging.info("User commands set.")


@router.message(Command(commands=['start']))
async def start_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    if message.chat.type != 'private':
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id}. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return

    user_id = message.from_user.id

    if user_id in ADMIN_IDS:
        await state.set_state(AdminStates.AUTHENTICATED_ADMIN)
        await set_admin_commands(message.bot)
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, {message.from_user.first_name}.",
            reply_markup=get_admin_inline_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        )
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} ({message.from_user.first_name}) —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")


@router.message(StateFilter(AdminStates.AUTHENTICATED_ADMIN))
async def handle_private_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    """
    if message.chat.type == 'private':
        if message.text.startswith('/'):
            command = message.text.split()[0]
            handler = admin_commands.get(command)
            if handler:
                logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É {command}.")
                await handler(message, state)
            else:
                await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command}")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    else:
        logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {message.chat.id}.")


@router.message(StateFilter(UserStates.AUTHENTICATED_USER))
async def handle_user_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    """
    if message.chat.type == 'private':
        if message.text.startswith('/'):
            command = message.text.split()[0]
            handler = user_commands.get(command)
            if handler:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É {command}.")
                await handler(message)
            else:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {message.chat.id}.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "getticket")
async def get_ticket_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await get_tickets_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "getclosedticket")
async def get_closed_ticket_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await get_closed_tickets_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "getusers")
async def get_users_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await get_users_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "knowledge_base")
async def knowledge_base_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:",
        reply_markup=get_knowledge_base_inline_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "load_embeddings")
async def load_embeddings_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await load_embeddings_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "showembeddings")
async def show_embeddings_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await show_embeddings_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "clear_chroma")
async def clear_chroma_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await clear_chroma_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "uploadtxt")
async def upload_txt_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await upload_txt_handler(callback.message, state)


@router.callback_query(StateFilter(AdminStates.AUTHENTICATED_ADMIN), F.data == "listfiles")
async def list_files_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await list_files_handler(callback.message, state)